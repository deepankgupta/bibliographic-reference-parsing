.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Rainbow 3pm"
.TH Rainbow 3pm "2007-09-27" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
HTML::Rainbow \- Put colour into your HTML
.SH "VERSION"
.IX Header "VERSION"
This document describes version 0.05 of HTML::Rainbow, released
2007\-09\-27.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use HTML::Rainbow \(aqrainbow\(aq;
\&  print rainbow(\(aqhello, world\(aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`HTML::Rainbow\*(C'\fR will take plain text string (or array of strings)
and mark it up with \f(CW\*(C`<font>\*(C'\fR tags (or \f(CW\*(C`<span>\*(C'\fR tags
if you're feeling particularly orthodox), and produce text that
drifts endlessly from one colour to the next.
.PP
The intensity of the red, green and blue channels follow mutually
prime sinusoidal periods.
.PP
Win friends, and influence enemies, on your favourite
\&\s-1HTML\s0 bulletin board.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fBnew\fR" 8
.IX Item "new"
Creates a new \f(CW\*(C`HTML::Rainbow\*(C'\fR object. A set of key/value parameters
can be supplied to control the finer details of the object's
behaviour.
.Sp
The colour-space of \s-1HTML\s0 is defined by a tuple of red, green and
blue components. Each component can vary between 0 and 255. Setting
all components to 0 produces black, and setting them all to 255
produces white. The parameters for \f(CW\*(C`new()\*(C'\fR allow you to control
the behaviour of the components, either individually or as a whole.
.Sp
Each value may be specifed as a number from 0 to 255, or as a
percentage (such as \f(CW\*(C`50%\*(C'\fR). Percentages are rounded to the nearest
integer, and values out of range are clipped to the nearest bound.
.RS 8
.IP "min" 4
.IX Item "min"
Sets the minimum value for all three components. For example, a
value of 0 (zero) may result in white being produced. This may
produce invisible text if the background colour is also white.
Hence, one may wish to use a value between 20 to 40 if this is the
case.
.IP "max" 4
.IX Item "max"
Sets the maximum value for all three components. Setting it to \f(CW\*(C`100%\*(C'\fR or
255 may result in black being produced. A similar warning concerning a
background colour of black applies here.
.IP "min_red, min_green, min_blue" 4
.IX Item "min_red, min_green, min_blue"
Sets the minimum value for the specified colour component.
.IP "max_red, max_green, max_blue" 4
.IX Item "max_red, max_green, max_blue"
Sets the maximum value for the specified colour component.
.IP "red, green, blue" 4
.IX Item "red, green, blue"
Sets the value of the specified colour component to a fixed value.
For example, the following call to \fInew()\fR...
.Sp
.Vb 6
\&  my $r = HTML::Rainbow\->new(
\&    red      =>   0,
\&    green    =>   0,
\&    min_blue =>  10,
\&    max_blue => 240,
\&  );
.Ve
.Sp
\&... will result in a rainbow generator that moves through various
shades of blue.
.IP "period_list" 4
.IX Item "period_list"
Set the periods available to choose from. At each peak and trough
of the sine wave followed by each colour component, a new period
length is chosen at random. This is to ensure that the sequence
of colours does not repeat itself too rapidly. Prime numbers
are well suited, and the value of period should be at least 10 (ten) or
more for best results. A list of periods, from 17 to 79, is used by
default. Very long texts will benefit from longer periods. The
parameter is a reference to an array.
.Sp
.Vb 5
\&  my $r = HTML::Rainbow\->new(
\&    min => 0,
\&    max => \(aq80%\(aq,
\&    period_list => [qw[ 19 37 53 71 89 107 131 151 173 193 ]],
\&  );
.Ve
.IP "use_span" 4
.IX Item "use_span"
Use the \s-1HTML\s0 \f(CW\*(C`<span>\*(C'\fR element instead of the \f(CW\*(C`<font>\*(C'\fR
element for specifying the colour. The result uses 6 more characters
per marked up character.
.RE
.RS 8
.Sp
The most specific parameter wins. If both, for example, a \f(CW\*(C`red\*(C'\fR
and a \f(CW\*(C`red_min\*(C'\fR parameter are found, the \f(CW\*(C`red\*(C'\fR parameter wins.
If a \f(CW\*(C`red_min\*(C'\fR and a \f(CW\*(C`min\*(C'\fR parameter is found, the \f(CW\*(C`red_min\*(C'\fR
parameter wins.
.RE
.IP "\fBrainbow\fR" 8
.IX Item "rainbow"
Converts each passed parameter to rainbowed markup, and returns
a single scalar with the resulting marked up text.
.Sp
.Vb 1
\&  print $r\->rainbow( \(aqsomewhere over the rainbow, bluebirds fly\(aq );
.Ve
.Sp
You can avoid using an intermediate variable by chaining the
\&\f(CW\*(C`rainbow\*(C'\fR method on from the \f(CW\*(C`new\*(C'\fR method:
.Sp
.Vb 5
\&  print HTML::Rainbow\->new(
\&    max => 127,
\&    min =>   0,
\&    period_list => [qw[ 11 29 47 71 97 113 149 173 ]],
\&  )\->rainbow( $text );
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Tie::Cycle::Sinewave" 8
.IX Item "Tie::Cycle::Sinewave"
The individual red, green and blue colour components follow
sinewaves produced by this module.
.IP "HTML::Parser" 8
.IX Item "HTML::Parser"
If you want to modify an existing \s-1HTML\s0 page, you'll probably have
to parse it in order to extract the text. The \f(CW\*(C`eg\*(C'\fR directory
contains some examples to show how this may be done.
.SH "BUGS"
.IX Header "BUGS"
None known.
.PP
Please report all bugs at
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=HTML\-Rainbow|rt.cpan.org>
.PP
Make sure you include the output from the following two commands:
.PP
.Vb 2
\&  perl \-MHTML::Rainbow \-le \(aqprint HTML::Rainbow::VERSION\(aq
\&  perl \-V
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
This module is dedicated to John Lang, someone I used to work
with back in the early days of the web. I found him one day
painstakingly writing \s-1HTML\s0 in a text editor and reviewing the
results in Netscape. He was trying to do something like this,
to post to a bulletin board, so I wrote some very ugly Perl
to help him out. Ten years later, I finally got around to
cleaning it up.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Landgren, copyright (C) 2005\-2007. All rights reserved.
.PP
http://www.landgren.net/perl/
.PP
If you (find a) use this module, I'd love to hear about it.
If you want to be informed of updates, send me a note. You
know my first name, you know my domain. Can you guess my
e\-mail address?
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
